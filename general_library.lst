


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             general_library, CODE, READWRIT
E
    2 00000000                 EXPORT           div_and_mod
    3 00000000                 EXPORT           edit_register
    4 00000000         
    5 00000000         
    6 00000000         
    7 00000000         
    8 00000000         
    9 00000000         ; Routine div_and_mod
   10 00000000         ; Author: ADB
   11 00000000         ; Calculates quotient and remainder of arg0/arg1
   12 00000000         ; Leaf routine
   13 00000000         ; arg0: dividend
   14 00000000         ; arg1: divisor
   15 00000000         div_and_mod
   16 00000000         ; Store used registers to stack
   17 00000000 E92D5FFC        STMFD            sp!, {r2-r12, lr}
   18 00000004         ; Comparison initializations
   19 00000004 E3A02000        MOV              r2, #0x00   ; Initialize arg0NF
                                                            lag
   20 00000008         ; arg0 comparison, negation and flag set
   21 00000008 E3500000        CMP              r0, #0x00   ; CPSR := (arg0 com
                                                            pared to 0)
   22 0000000C B2222001        EORLT            r2, r2, #0x01 ; if(arg0 < 0) se
                                                            t arg0NFlag
   23 00000010 B2600000        RSBLT            r0, r0, #0x00 ; if(arg0 < 0) ne
                                                            gate arg0
   24 00000014         ; arg1 comparison, negation and flag set
   25 00000014 E3510000        CMP              r1, #0x00   ; CPSR := (arg1 com
                                                            pared to 0)
   26 00000018 B2222001        EORLT            r2, r2, #0x01 ; if(arg1 < 0) se
                                                            t arg1NFlag
   27 0000001C B2611000        RSBLT            r1, r1, #0x00 ; if(arg1 < 0) ne
                                                            gate arg1
   28 00000020         ; Calculation initializations
   29 00000020 E3A0500F        MOV              r5, #0x0F   ; Initialize counte
                                                            r to 15
   30 00000024 E3A06000        MOV              r6, #0x00   ; Initialize quotie
                                                            nt to 0
   31 00000028 E1A01781        MOV              r1, r1, LSL #0x0F ; Left shift 
                                                            divisor 15 places
   32 0000002C E1A07000        MOV              r7, r0      ; Remainder := divi
                                                            dend
   33 00000030         dam_loop
   34 00000030         ; Division loop
   35 00000030 E0477001        SUB              r7, r7, r1  ; Remainder := rema
                                                            inder - divisor
   36 00000034 E1A06086        MOV              r6, r6, LSL #0x01 ; Left shift 
                                                            quotient one bit
   37 00000038 E3570000        CMP              r7, #0x00   ; CPSR := (remainde
                                                            r compared to 0)
   38 0000003C A2866001        ADDGE            r6, r6, #0x01 ; if(remainder >=
                                                             0) quotient LSB = 
                                                            1
   39 00000040 B0877001        ADDLT            r7, r7, r1  ; elseif(remainder 
                                                            < 0) remainder := r
                                                            emainder + divisor
   40 00000044 E1A010A1        MOV              r1, r1, LSR #0x01 ; Right shift



ARM Macro Assembler    Page 2 


                                                             divisor one bit
   41 00000048 E3550000        CMP              r5, #0x00   ; CPSR := (counter 
                                                            compared to 0)
   42 0000004C DA000001        BLE              dam_done    ; if(counter <= 0) 
                                                            branch to `done`
   43 00000050 E2455001        SUB              r5, r5, #0x01 
                                                            ; Decrement counter
                                                            
   44 00000054 EAFFFFF5        B                dam_loop    ; Branch to divisio
                                                            n loop
   45 00000058         dam_done
   46 00000058         ; Handle signed number flags
   47 00000058 E3520001        CMP              r2, #0x01   ; CPSR := (diffFlag
                                                             compared to 1)
   48 0000005C 02666000        RSBEQ            r6, r6, #0x00 ; if(diffFlag == 
                                                            1) negate quotient
   49 00000060         
   50 00000060         ; Put quotient and remainder into return registers
   51 00000060 E1A00006        MOV              r0, r6      ; Store quotient in
                                                             r0
   52 00000064 E1A01007        MOV              r1, r7      ; Store remainder i
                                                            n r7
   53 00000068         ; Prepare for return
   54 00000068 E8BD5FFC        LDMFD            sp!, {r2-r12, lr} ; Load used r
                                                            egisters from stack
                                                            
   55 0000006C E12FFF1E        BX               lr          ; Branch to caller
   56 00000070         ; ret0: quotient
   57 00000070         ; ret1: remainder
   58 00000070         
   59 00000070         
   60 00000070         
   61 00000070         
   62 00000070         
   63 00000070         ; Routine edit_register
   64 00000070         ; Author: ADB
   65 00000070         ; Sets specific bits in address IO0SET without affecting
                        other bits
   66 00000070         ; Leaf routine
   67 00000070         ; arg0: Code with bits to edit. Only bits with a 1 in th
                       is code will be altered
   68 00000070         ; arg1: Code with bit targets
   69 00000070         ; arg4: Address of register to be edited
   70 00000070         edit_register
   71 00000070         ; Store used registers on stack
   72 00000070 E92D4004        STMFD            sp!, {r2, lr}
   73 00000074         ; Sets appropriate bits
   74 00000074 E5942000        LDR              r2, [r4]    ; Load contents of 
                                                            target register
   75 00000078 E1812002        ORR              r2, r1, r2  ; Bitwise OR bit ta
                                                            rgets with target r
                                                            egister
   76 0000007C         ; Resets appropriate bits
   77 0000007C E0200001        EOR              r0, r0, r1  ; Bitwise XOR edit 
                                                            bits with bit targe
                                                            ts
   78 00000080 E1C22000        BIC              r2, r2, r0  ; Bit clear. Clear 
                                                            edit bits there wer
                                                            e 0 in bit targets



ARM Macro Assembler    Page 3 


   79 00000084 E1801001        ORR              r1, r0, r1  ; Bitwise-OR par0 w
                                                            ith contents of tar
                                                            get register
   80 00000088 E5842000        STR              r2, [r4]    ; Store new value i
                                                            nto target register
                                                            
   81 0000008C         ; Prepare for return
   82 0000008C E8BD4004        LDMFD            sp!, {r2, lr} ; Load used regis
                                                            ters to stack
   83 00000090 E12FFF1E        BX               lr          ; Branch to caller
   84 00000094         ; No return arguments or addresses
   85 00000094         
   86 00000094         
   87 00000094         
   88 00000094         
   89 00000094         
   90 00000094                 END
Command Line: --debug --xref --apcs=interwork -ogeneral_library.o -IC:\Keil\ARM
\INC -IC:\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" --list=general_libra
ry.lst general_library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

dam_done 00000058

Symbol: dam_done
   Definitions
      At line 45 in file general_library.s
   Uses
      At line 42 in file general_library.s
Comment: dam_done used once
dam_loop 00000030

Symbol: dam_loop
   Definitions
      At line 33 in file general_library.s
   Uses
      At line 44 in file general_library.s
Comment: dam_loop used once
div_and_mod 00000000

Symbol: div_and_mod
   Definitions
      At line 15 in file general_library.s
   Uses
      At line 2 in file general_library.s
Comment: div_and_mod used once
edit_register 00000070

Symbol: edit_register
   Definitions
      At line 70 in file general_library.s
   Uses
      At line 3 in file general_library.s
Comment: edit_register used once
general_library 00000000

Symbol: general_library
   Definitions
      At line 1 in file general_library.s
   Uses
      None
Comment: general_library unused
5 symbols
325 symbols in table
