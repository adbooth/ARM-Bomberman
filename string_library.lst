


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             string_library, CODE, READWRITE
    2 00000000         ; EXPORTs
    3 00000000                 EXPORT           cmp_str
    4 00000000                 EXPORT           numberString_to_int
    5 00000000                 EXPORT           int_to_numberString
    6 00000000                 EXPORT           newline
    7 00000000                 EXPORT           output_character
    8 00000000                 EXPORT           output_string
    9 00000000                 EXPORT           println
   10 00000000                 EXPORT           prompt
   11 00000000                 EXPORT           read_character
   12 00000000                 EXPORT           read_string
   13 00000000                 EXPORT           reverse_string
   14 00000000                 EXPORT           set_figs
   15 00000000                 EXPORT           store_string
   16 00000000                 EXPORT           string_length
   17 00000000         ; IMPORTs
   18 00000000                 IMPORT           div_and_mod
   19 00000000         
   20 00000000         
   21 00000000         
   22 00000000         
   23 00000000         ; Allocate 16 bytes in memory for values input to int_to
                       _numberString
   24 00000000         int_to_ASCII_number_mem
   25 00000000 00000000        DCD              0x00000000
   26 00000004 00000000        DCD              0x00000000
   27 00000008 00000000        DCD              0x00000000
   28 0000000C 00000000        DCD              0x00000000
   29 00000010                 ALIGN
   30 00000010         
   31 00000010         ; Allocate 16 bytes in memory for strings input to read_
                       string
   32 00000010         read_string_mem
   33 00000010 00000000        DCD              0x00000000
   34 00000014 00000000        DCD              0x00000000
   35 00000018 00000000        DCD              0x00000000
   36 0000001C 00000000        DCD              0x00000000
   37 00000020                 ALIGN
   38 00000020         
   39 00000020         ; Allocate 16 bytes in memory for strings input to rever
                       se_string
   40 00000020         reverse_string_mem
   41 00000020 00000000        DCD              0x00000000
   42 00000024 00000000        DCD              0x00000000
   43 00000028 00000000        DCD              0x00000000
   44 0000002C 00000000        DCD              0x00000000
   45 00000030                 ALIGN
   46 00000030         
   47 00000030         set_figs_mem
   48 00000030 00000000        DCD              0x00000000
   49 00000034 00000000        DCD              0x00000000
   50 00000038 00000000        DCD              0x00000000
   51 0000003C 00000000        DCD              0x00000000
   52 00000040                 ALIGN
   53 00000040         
   54 00000040         ; UART0 addresses
   55 00000040 E000C000 
                       U0THR   EQU              0xE000C000  ; UART0 buffer



ARM Macro Assembler    Page 2 


   56 00000040 E000C014 
                       U0LSR   EQU              0xE000C014  ; UART0 Line Status
                                                             Register
   57 00000040         
   58 00000040         
   59 00000040         
   60 00000040         ; Routine cmp_str
   61 00000040         ; Author: MH
   62 00000040         ; Compares two strings
   63 00000040         ; Leaf routine
   64 00000040         ; arg4: base address of first string to be compared
   65 00000040         ; arg5: base address of second string to be compared
   66 00000040         cmp_str
   67 00000040         ; Store used registers to stack
   68 00000040 E92D5C30        STMFD            sp!, {r4, r5, r10, r11, r12, lr
}
   69 00000044 E3A0C000        MOV              r12, #0     ; Initialize offset
                                                             to 0
   70 00000048 E3A00000        MOV              r0, #0      ; Clear r0
   71 0000004C         cs_loop
   72 0000004C E7D4A00C        LDRB             r10, [r4, r12] ; Load value at 
                                                            r4 with offset of r
                                                            12 into r10
   73 00000050 E7D5B00C        LDRB             r11, [r5, r12] ; Load value at 
                                                            r5 with offset of r
                                                            12 into r11
   74 00000054 E35A0000        CMP              r10, #0x00  ; Check if r10 is N
                                                            ULL terminator
   75 00000058 0A000006        BEQ              cs_done     ; If it is, branch 
                                                            to cdone
   76 0000005C E35B0000        CMP              r11, #0x00  ; Check if r11 is N
                                                            ULL terminator
   77 00000060 0A000004        BEQ              cs_done     ; If it is, branch 
                                                            to cdone
   78 00000064 E15A000B        CMP              r10, r11    ; Compare current c
                                                            haracters
   79 00000068 13A00001        MOVNE            r0, #1      ; If they are not t
                                                            he same, set flag t
                                                            o 1
   80 0000006C 1A000001        BNE              cs_done     ; If they are not t
                                                            he same, branch to 
                                                            cdone
   81 00000070 E28CC001        ADD              r12, r12, #1 ; If the are the s
                                                            ame, increment offs
                                                            et
   82 00000074 EAFFFFF4        B                cs_loop     ; Branch back to cl
                                                            oop
   83 00000078         cs_done
   84 00000078         ; Prepare for return
   85 00000078 E8BD5C30        LDMFD            sp!, {r4, r5, r10, r11, r12, lr
} 
                                                            ; Load used registe
                                                            rs from stack
   86 0000007C E12FFF1E        BX               lr          ; Branch to caller
   87 00000080         ; ret0: flag indicating sameness of strings; 0 if string
                       s are equal, 1 otherwise
   88 00000080         ; ret4: arg4
   89 00000080         ; ret5: arg5
   90 00000080         



ARM Macro Assembler    Page 3 


   91 00000080         
   92 00000080         
   93 00000080         
   94 00000080         
   95 00000080         ; Routine numberString_to_int
   96 00000080         ; Author: MH
   97 00000080         ; Converts decimal string to number
   98 00000080         ; Leaf routine
   99 00000080         ; arg4: base address of string to be converted
  100 00000080         numberString_to_int
  101 00000080         ; Store used registers to stack
  102 00000080 E92D5C32        STMFD            sp!, {r1, r4, r5, r10, r11, r12
, lr}
  103 00000084 E3A00000        MOV              r0, #0
  104 00000088 E5D41000        LDRB             r1, [r4]    ; Load first byte o
                                                            f string from memor
                                                            y to r1
  105 0000008C E3A0C000        MOV              r12, #0
  106 00000090 E28CC001        ADD              r12, r12, #1 ; Increment memory
                                                             pointer by 1
  107 00000094 E351002D        CMP              r1, #'-'    ; Compare r1 to ASC
                                                            II '-'
  108 00000098 03A0A001        MOVEQ            r10, #1     ; If equal, number 
                                                            is negative, set fl
                                                            ag to 1
  109 0000009C 13A0A000        MOVNE            r10, #0     ; If not equal, num
                                                            ber is positive kee
                                                            p flag at 0
  110 000000A0 E3A05000        MOV              r5, #0      ; clear r5
  111 000000A4 C2415030        SUBGT            r5, r1, #'0' ; If r1 > 0x2D, r1
                                                             is a number, subtr
                                                            act 0x30 to get dec
                                                            imal value
  112 000000A8 E3A0B00A        MOV              r11, #10    ; Move 10 into r11 
                                                            for decimal shift
  113 000000AC         ic_loop
  114 000000AC E7D4100C        LDRB             r1, [r4, r12] ; Load next byte 
                                                            to r1
  115 000000B0 E28CC001        ADD              r12, r12, #1 ; Increment memory
                                                             pointer
  116 000000B4 E3510000        CMP              r1, #0x00   ; Check for ASCII '
                                                            NULL'
  117 000000B8 0A000004        BEQ              ic_done     ; If 'NULL' branch 
                                                            to primality
  118 000000BC E2411030        SUB              r1, r1, #'0' ; Subtract 0x30 to
                                                             get decimal value
  119 000000C0 E0060B95        MUL              r6, r5, r11 ; Multiply r5 by 10
                                                             and temporarily st
                                                            ore in r6
  120 000000C4 E1A05006        MOV              r5, r6      ; Move back into r5
                                                            
  121 000000C8 E0855001        ADD              r5, r5, r1  ; Add r1 to r5
  122 000000CC EAFFFFF6        B                ic_loop     ; Branch back to po
                                                            ol
  123 000000D0         ic_done
  124 000000D0 E35A0001        CMP              r10, #1     ; Check if input is
                                                             negative
  125 000000D4 02655000        RSBEQ            r5, r5, #0  ; If it is negative
                                                            , subtract from 0



ARM Macro Assembler    Page 4 


  126 000000D8 E1A00005        MOV              r0, r5      ; Move number into 
                                                            r0 to be output arg
                                                            ument
  127 000000DC         ; Prepare for return
  128 000000DC E8BD5C32        LDMFD            sp!, {r1, r4, r5, r10, r11, r12
, lr} 
                                                            ; Load used registe
                                                            rs from stack
  129 000000E0 E12FFF1E        BX               lr          ; Branch to caller
  130 000000E4         ; ret0: value of input string
  131 000000E4         ; ret4: arg4
  132 000000E4         
  133 000000E4         
  134 000000E4         
  135 000000E4         
  136 000000E4         
  137 000000E4         ; Routine int_to_numberString
  138 000000E4         ; Author: ADB
  139 000000E4         ; Returns string representing value of number passed int
                       o arg0
  140 000000E4         ; Calls: reverse_string
  141 000000E4         ; arg0: value to be turned into ASCII string
  142 000000E4         int_to_numberString
  143 000000E4 E92D4003        STMFD            sp!, {r0, r1, lr}
  144 000000E8         ; Divide by ten, store remainder in ASCII, repeat
  145 000000E8 E59F41E0        LDR              r4, =int_to_ASCII_number_mem
  146 000000EC         itAn_loop
  147 000000EC E3A0100A        MOV              r1, #10
  148 000000F0 EBFFFFFE        BL               div_and_mod
  149 000000F4 E2811030        ADD              r1, r1, #'0'
  150 000000F8 E4C41001        STRB             r1, [r4], #1
  151 000000FC E3500000        CMP              r0, #0
  152 00000100 1AFFFFF9        BNE              itAn_loop
  153 00000104         ; Add null to end
  154 00000104 E3A01000        MOV              r1, #0x00
  155 00000108 E5C41000        STRB             r1, [r4]
  156 0000010C         ; Reverse string for answer
  157 0000010C E59F41BC        LDR              r4, =int_to_ASCII_number_mem
  158 00000110 EBFFFFFE        BL               reverse_string
  159 00000114         ; Return to caller
  160 00000114 E8BD4003        LDMFD            sp!, {r0, r1, lr}
  161 00000118 E12FFF1E        BX               lr
  162 0000011C         ; ret0: arg0
  163 0000011C         ; ret4: base address of constructed string
  164 0000011C         
  165 0000011C         
  166 0000011C         
  167 0000011C         
  168 0000011C         
  169 0000011C         ; Routine newline
  170 0000011C         ; Author: ADB
  171 0000011C         ; Prints a line feed and carriage return to move text to
                        next line
  172 0000011C         ; Calls output_character
  173 0000011C         ; No input arguments or addresses
  174 0000011C         newline
  175 0000011C         ; Store used registers to stack
  176 0000011C E92D4001        STMFD            sp!, {r0, lr}
  177 00000120         ; Output line feed and carriage return



ARM Macro Assembler    Page 5 


  178 00000120 E3A0000A        MOV              r0, #0x0A
  179 00000124 EBFFFFFE        BL               output_character 
                                                            ; Output line feed
  180 00000128 E3A0000D        MOV              r0, #0x0D
  181 0000012C EBFFFFFE        BL               output_character ; Output carri
                                                            age return
  182 00000130         ; Prepare for return
  183 00000130 E8BD4001        LDMFD            sp!, {r0, lr} ; Load used regis
                                                            ters from stack
  184 00000134 E12FFF1E        BX               lr          ; Branch to caller
  185 00000138         ; No return arguments or addresses
  186 00000138         
  187 00000138         
  188 00000138         
  189 00000138         
  190 00000138         
  191 00000138         ; Routine output_character
  192 00000138         ; Author: ADB
  193 00000138         ; Transmits a character through the UART from the caller
                        passed into r0
  194 00000138         ; Leaf routine
  195 00000138         ; arg0: ASCII value of character to be output
  196 00000138         output_character
  197 00000138         ; Store used registers to stack
  198 00000138 E92D400F        STMFD            sp!, {r0, r1, r2, r3, lr}
  199 0000013C         ; Set up register addresses
  200 0000013C E59F2190        LDR              r2, =U0THR  ; r2 := buffer addr
                                                            ess
  201 00000140 E59F3190        LDR              r3, =U0LSR  ; r3 := LSR address
                                                            
  202 00000144         oc_loop
  203 00000144         ; Check the THRE bit in the LSR for emptiness
  204 00000144 E5D31000        LDRB             r1, [r3]    ; r1 := contents of
                                                             LSR
  205 00000148 E2011020        AND              r1, r1, #0x20 ; r1 := AND(LSR, 
                                                            0x20) //Masking the
                                                             LSR with the value
                                                             32 to get the THRE
                                                             bit
  206 0000014C E3510020        CMP              r1, #0x20   ; CPSR := CMP(maske
                                                            d value, 0x20)
  207 00000150 1AFFFFFB        BNE              oc_loop     ; if(masked value !
                                                            = 0x20) branch to o
                                                            utputloop //Loop un
                                                            til flag is 1 which
                                                             means register is 
                                                            empty
  208 00000154         ; Once the THRE bit is 1, transmit the passed argument t
                       hrough the UART by storing the contents of r0
  209 00000154 E5C20000        STRB             r0, [r2]    ; buffer := passed 
                                                            value from r0
  210 00000158         ; Prepare for return
  211 00000158 E8BD400F        LDMFD            sp!, {r0, r1, r2, r3, lr} ; Loa
                                                            d used registers fr
                                                            om stack
  212 0000015C E12FFF1E        BX               lr          ; Branch to caller
  213 00000160         ; ret0: arg0
  214 00000160         
  215 00000160         



ARM Macro Assembler    Page 6 


  216 00000160         
  217 00000160         
  218 00000160         
  219 00000160         ; Routine output_string
  220 00000160         ; Author: ADB
  221 00000160         ; Outputs a string through the UART
  222 00000160         ; Calls output_character
  223 00000160         ; arg4: base address of string to be output
  224 00000160         output_string
  225 00000160         ; Store used registers to stack
  226 00000160 E92D4013        STMFD            sp!, {r0, r1, r4, lr}
  227 00000164 E3A01000        MOV              r1, #0      ; Initialize offset
                                                             pointer
  228 00000168         os_loop
  229 00000168 E7D40001        LDRB             r0, [r4, r1] ; Load data in add
                                                            ress into r0
  230 0000016C E3500000        CMP              r0, #0x00   ; Check if 'NULL' r
                                                            eached
  231 00000170 0A000002        BEQ              os_done     ; If 'NULL', exit l
                                                            oop
  232 00000174 EBFFFFFE        BL               output_character 
                                                            ; Output character
  233 00000178 E2811001        ADD              r1, r1, #1  ; Increment offset 
                                                            pointer
  234 0000017C EAFFFFF9        B                os_loop     ; Loop for next cha
                                                            racter
  235 00000180         os_done
  236 00000180         ; Prepare for return
  237 00000180 E8BD4013        LDMFD            sp!, {r0, r1, r4, lr} ; Load us
                                                            ed registers from s
                                                            tack
  238 00000184 E12FFF1E        BX               lr          ; Branch to caller
  239 00000188         ; ret4: arg4
  240 00000188         
  241 00000188         
  242 00000188         
  243 00000188         
  244 00000188         
  245 00000188         ; Routine println
  246 00000188         ; Author: ADB
  247 00000188         ; Prints string held in arg4 and then a newline
  248 00000188         ; Calls output_string and newline
  249 00000188         ; arg4: base address of string to be printed
  250 00000188         println
  251 00000188 E92D4000        STMFD            sp!, {lr}
  252 0000018C EBFFFFFE        BL               output_string
  253 00000190 EBFFFFFE        BL               newline
  254 00000194 E8BD4000        LDMFD            sp!, {lr}
  255 00000198 E12FFF1E        BX               lr
  256 0000019C         ; ret4: arg4
  257 0000019C         
  258 0000019C         
  259 0000019C         
  260 0000019C         
  261 0000019C         
  262 0000019C         ; Routine prompt
  263 0000019C         ; Author: ADB
  264 0000019C         ; Prints prompt held in arg4 and returns user input stri
                       ng into ret4



ARM Macro Assembler    Page 7 


  265 0000019C         ; Calls output_string, read_string and newline
  266 0000019C         ; arg4: base address of prompt for user
  267 0000019C         prompt
  268 0000019C E92D4000        STMFD            sp!, {lr}
  269 000001A0 EBFFFFFE        BL               output_string
  270 000001A4 EBFFFFFE        BL               read_string
  271 000001A8 EBFFFFFE        BL               newline
  272 000001AC E8BD4000        LDMFD            sp!, {lr}
  273 000001B0 E12FFF1E        BX               lr
  274 000001B4         ; ret4: base address of user input string
  275 000001B4         
  276 000001B4         
  277 000001B4         
  278 000001B4         
  279 000001B4         
  280 000001B4         ; Routine read_character
  281 000001B4         ; Author: MH
  282 000001B4         ; Reads a character from the UART and returns it into re
                       t0
  283 000001B4         ; Leaf routine
  284 000001B4         ; No input arguments or addresses
  285 000001B4         read_character
  286 000001B4         ; Store used registers to stack
  287 000001B4 E92D4C18        STMFD            sp!, {r3, r4, r10, r11, lr}
  288 000001B8         ; Set up register addresses
  289 000001B8 E59FA114        LDR              r10, =U0THR ; r10 := buffer add
                                                            ress
  290 000001BC E59FB114        LDR              r11, =U0LSR ; r11 := LSR addres
                                                            s
  291 000001C0         rc_loop
  292 000001C0         ; Check the RDR bit in the LSR for readiness
  293 000001C0 E59B3000        LDR              r3, [r11]   ; r3 := contents of
                                                             the LSR
  294 000001C4 E2034001        AND              r4, r3, #0x01 ; r4 := AND(LSR, 
                                                            0x01) //Masking the
                                                             LSR with the value
                                                             1 to get the RDR b
                                                            it
  295 000001C8 E3540001        CMP              r4, #0x01   ; CPSR := CMP(maske
                                                            d value, 0x01)
  296 000001CC 1AFFFFFB        BNE              rc_loop     ; if(masked value !
                                                            = 0x01) branch to r
                                                            eadloop //Loop unti
                                                            l flag is 1 which m
                                                            eans register is re
                                                            ady
  297 000001D0         ; Once the RDR bit is 1, take the contents of the buffer
                        into r0 and return
  298 000001D0 E5DA0000        LDRB             r0, [r10]   ; r0 := contents of
                                                             buffer
  299 000001D4         ; Prepare for return
  300 000001D4 E8BD4C18        LDMFD            sp!, {r3, r4, r10, r11, lr} ; L
                                                            oad used registers 
                                                            from stack
  301 000001D8 E12FFF1E        BX               lr          ; Branch to caller
  302 000001DC         ; ret0: ASCII value of character that was input
  303 000001DC         
  304 000001DC         
  305 000001DC         



ARM Macro Assembler    Page 8 


  306 000001DC         
  307 000001DC         
  308 000001DC         ; Routine read_string
  309 000001DC         ; Author: MH
  310 000001DC         ; Reads a string from the user and stores it in memory
  311 000001DC         ; Calls read_character
  312 000001DC         ; No input arguments or addresses
  313 000001DC         read_string
  314 000001DC         ; Store used registers to stack
  315 000001DC E92D4005        STMFD            sp!, {r0, r2, lr}
  316 000001E0 E59F40F4        LDR              r4, =read_string_mem ; r1 := st
                                                            ring pointer addres
                                                            s
  317 000001E4 E3A02000        MOV              r2, #0      ; Initialize pointe
                                                            r to 0
  318 000001E8         rs_loop
  319 000001E8 EBFFFFFE        BL               read_character ; Get char from 
                                                            user into r0
  320 000001EC EBFFFFFE        BL               output_character ; Output chars
                                                             as they are typed 
                                                            in
  321 000001F0 E7C40002        STRB             r0, [r4, r2] ; Store char in r0
                                                             into memory at rea
                                                            d_string_mem
  322 000001F4 E2822001        ADD              r2, r2, #1  ; Increment pointer
                                                            
  323 000001F8 E350000D        CMP              r0, #0x0D   ; CPSR := CMP(char,
                                                             carriage return) /
                                                            /Compare char to ca
                                                            rriage return
  324 000001FC 1AFFFFF9        BNE              rs_loop     ; if(char != carria
                                                            ge return) branch t
                                                            o read_string //Loo
                                                            p until char is car
                                                            riage return
  325 00000200 E3A00000        MOV              r0, #0x00   ; r0 := NULL
  326 00000204 E2422001        SUB              r2, r2, #1  ; Decrement counter
                                                            
  327 00000208 E7C40002        STRB             r0, [r4, r2] ; Store NULL in pl
                                                            ace of carriage ret
                                                            urn
  328 0000020C         ; Prepare for return
  329 0000020C E8BD4005        LDMFD            sp!, {r0, r2, lr} ; Load used r
                                                            egisters from stack
                                                            
  330 00000210 E12FFF1E        BX               lr          ; Branch to caller
  331 00000214         ; ret4: base address of string that was input
  332 00000214         
  333 00000214         
  334 00000214         
  335 00000214         
  336 00000214         
  337 00000214         ; Routine reverse_string
  338 00000214         ; Author: ADB
  339 00000214         ; Returns string as reverse of string passed into arg4
  340 00000214         ; Calls: string_length
  341 00000214         ; arg4: base address of string to be reversed
  342 00000214         reverse_string
  343 00000214 E92D4023        STMFD            sp!, {r0, r1, r5, lr}



ARM Macro Assembler    Page 9 


  344 00000218 EBFFFFFE        BL               string_length ; Get length of s
                                                            tring
  345 0000021C E2400001        SUB              r0, r0, #1
  346 00000220         ; Loop backwards through string and move ASCII values to
                        new address in reverse order
  347 00000220 E59F50B8        LDR              r5, =reverse_string_mem
  348 00000224         rv_loop
  349 00000224 E7D41000        LDRB             r1, [r4, r0] ; Get ASCII value 
                                                            of char from string
                                                            
  350 00000228 E4C51001        STRB             r1, [r5], #1 ; Store ASCII valu
                                                            e of char and incre
                                                            ment address
  351 0000022C E3500000        CMP              r0, #0      ; Compare counter t
                                                            o 0
  352 00000230 E2400001        SUB              r0, r0, #1  ; Decrement counter
                                                            
  353 00000234 1AFFFFFA        BNE              rv_loop     ; if(counter != 0) 
                                                            branch to rs_loop
  354 00000238         ; Add NULL char to end
  355 00000238 E3A00000        MOV              r0, #0x00
  356 0000023C E5C50000        STRB             r0, [r5]
  357 00000240         ; Return address of new string in r4
  358 00000240 E59F4098        LDR              r4, =reverse_string_mem
  359 00000244         ; Return to caller
  360 00000244 E8BD4023        LDMFD            sp!, {r0, r1, r5, lr}
  361 00000248 E12FFF1E        BX               lr
  362 0000024C         ; ret4: base address of reversed string
  363 0000024C         
  364 0000024C         
  365 0000024C         
  366 0000024C         
  367 0000024C         
  368 0000024C         ; Routine set_figs
  369 0000024C         ; Makes a numberString a certain number of characters lo
                       ng by adding zeroes to the front
  370 0000024C         ; Author: ADB
  371 0000024C         ; Calls:
  372 0000024C         ; arg0: desired number of digits
  373 0000024C         ; arg4: numberString to be edited
  374 0000024C         set_figs
  375 0000024C E92D4023        STMFD            sp!, {r0, r1, r5, lr}
  376 00000250         ; Move target length to r1 and get current length of str
                       ing
  377 00000250 E1A01000        MOV              r1, r0
  378 00000254 EBFFFFFE        BL               string_length
  379 00000258 E1500001        CMP              r0, r1      ; CPSR := CMP(strin
                                                            g length, target le
                                                            ngth)
  380 0000025C CA00000A        BGT              sf_done     ; if(string length 
                                                            > target length) br
                                                            anch to sf_done
  381 00000260 E59F507C        LDR              r5, =set_figs_mem
  382 00000264         sf_loop
  383 00000264 E3A02030        MOV              r2, #'0'
  384 00000268 E1500001        CMP              r0, r1      ; CPSR := CMP(strin
                                                            g length, counter)
  385 0000026C A4D42001        LDRBGE           r2, [r4], #1 ; if(string length
                                                             >= counter)



ARM Macro Assembler    Page 10 


  386 00000270 E4C52001        STRB             r2, [r5], #1
  387 00000274 E2411001        SUB              r1, r1, #1
  388 00000278 E3510000        CMP              r1, #0
  389 0000027C 1AFFFFF8        BNE              sf_loop
  390 00000280         ; Move ASCII NULL to end of string
  391 00000280 E3A02000        MOV              r2, #0x00
  392 00000284 E5C52000        STRB             r2, [r5]
  393 00000288         ; Move address to ret0
  394 00000288 E59F4054        LDR              r4, =set_figs_mem
  395 0000028C         sf_done
  396 0000028C         ; Return to caller
  397 0000028C E8BD4023        LDMFD            sp!, {r0, r1, r5, lr}
  398 00000290 E12FFF1E        BX               lr
  399 00000294         ; ret0: arg0
  400 00000294         ; ret4: base address of edited string
  401 00000294         
  402 00000294         
  403 00000294         
  404 00000294         
  405 00000294         
  406 00000294         ; Routine store_string
  407 00000294         ; Stores a string passed whose base address is passed th
                       rough r4 into an array whose base address is passed thro
                       ugh r5
  408 00000294         ; Author: ADB
  409 00000294         ; Leaf routine
  410 00000294         ; arg4: base address of string to be stored
  411 00000294         ; arg5: base address of location in memory to be stored 
                       to
  412 00000294         store_string
  413 00000294 E92D4031        STMFD            sp!, {r0, r4, r5, lr}
  414 00000298         ss_loop
  415 00000298 E4D40001        LDRB             r0, [r4], #1
  416 0000029C E4C50001        STRB             r0, [r5], #1
  417 000002A0 E3500000        CMP              r0, #0x00
  418 000002A4 1AFFFFFB        BNE              ss_loop
  419 000002A8         ; Return to caller
  420 000002A8 E8BD4031        LDMFD            sp!, {r0, r4, r5, lr}
  421 000002AC E12FFF1E        BX               lr
  422 000002B0         ; ret4: arg4
  423 000002B0         ; ret5: arg5
  424 000002B0         
  425 000002B0         
  426 000002B0         
  427 000002B0         
  428 000002B0         
  429 000002B0         ; Routine string_length
  430 000002B0         ; Returns character length of a string, discluding termi
                       nating NULL character
  431 000002B0         ; Author: ADB
  432 000002B0         ; Leaf routine
  433 000002B0         ; arg4: base address of string to be analyzed
  434 000002B0         string_length
  435 000002B0 E92D4012        STMFD            sp!, {r1, r4, lr}
  436 000002B4         ; Loop and increment counter untill NULL is encountered
  437 000002B4 E3A00000        MOV              r0, #0      ; Initialize counte
                                                            r
  438 000002B8         sl_loop
  439 000002B8 E7D41000        LDRB             r1, [r4, r0] ; Get ASCII value 



ARM Macro Assembler    Page 11 


                                                            of char from string
                                                            
  440 000002BC E3510000        CMP              r1, #0x00   ; Compare to NULL
  441 000002C0 12800001        ADDNE            r0, r0, #1  ; Increment counter
                                                             if not NULL
  442 000002C4 1AFFFFFB        BNE              sl_loop     ; Loop if not NULL
  443 000002C8         ; Return to caller
  444 000002C8 E8BD4012        LDMFD            sp!, {r1, r4, lr}
  445 000002CC E12FFF1E        BX               lr
  446 000002D0         ; ret0: length of string passed into par4
  447 000002D0         ; ret4: arg4
  448 000002D0         
  449 000002D0         
  450 000002D0         
  451 000002D0         
  452 000002D0         
  453 000002D0                 END
              00000000 
              E000C000 
              E000C014 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --apcs=interwork -ostring_library.o -IC:\Keil\ARM\
INC -IC:\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" --list=string_library
.lst string_library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

cmp_str 00000040

Symbol: cmp_str
   Definitions
      At line 66 in file string_library.s
   Uses
      At line 3 in file string_library.s
Comment: cmp_str used once
cs_done 00000078

Symbol: cs_done
   Definitions
      At line 83 in file string_library.s
   Uses
      At line 75 in file string_library.s
      At line 77 in file string_library.s
      At line 80 in file string_library.s

cs_loop 0000004C

Symbol: cs_loop
   Definitions
      At line 71 in file string_library.s
   Uses
      At line 82 in file string_library.s
Comment: cs_loop used once
ic_done 000000D0

Symbol: ic_done
   Definitions
      At line 123 in file string_library.s
   Uses
      At line 117 in file string_library.s
Comment: ic_done used once
ic_loop 000000AC

Symbol: ic_loop
   Definitions
      At line 113 in file string_library.s
   Uses
      At line 122 in file string_library.s
Comment: ic_loop used once
int_to_ASCII_number_mem 00000000

Symbol: int_to_ASCII_number_mem
   Definitions
      At line 24 in file string_library.s
   Uses
      At line 145 in file string_library.s
      At line 157 in file string_library.s

int_to_numberString 000000E4

Symbol: int_to_numberString
   Definitions
      At line 142 in file string_library.s
   Uses
      At line 5 in file string_library.s
Comment: int_to_numberString used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

itAn_loop 000000EC

Symbol: itAn_loop
   Definitions
      At line 146 in file string_library.s
   Uses
      At line 152 in file string_library.s
Comment: itAn_loop used once
newline 0000011C

Symbol: newline
   Definitions
      At line 174 in file string_library.s
   Uses
      At line 6 in file string_library.s
      At line 253 in file string_library.s
      At line 271 in file string_library.s

numberString_to_int 00000080

Symbol: numberString_to_int
   Definitions
      At line 100 in file string_library.s
   Uses
      At line 4 in file string_library.s
Comment: numberString_to_int used once
oc_loop 00000144

Symbol: oc_loop
   Definitions
      At line 202 in file string_library.s
   Uses
      At line 207 in file string_library.s
Comment: oc_loop used once
os_done 00000180

Symbol: os_done
   Definitions
      At line 235 in file string_library.s
   Uses
      At line 231 in file string_library.s
Comment: os_done used once
os_loop 00000168

Symbol: os_loop
   Definitions
      At line 228 in file string_library.s
   Uses
      At line 234 in file string_library.s
Comment: os_loop used once
output_character 00000138

Symbol: output_character
   Definitions
      At line 196 in file string_library.s
   Uses
      At line 7 in file string_library.s
      At line 179 in file string_library.s
      At line 181 in file string_library.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 232 in file string_library.s
      At line 320 in file string_library.s

output_string 00000160

Symbol: output_string
   Definitions
      At line 224 in file string_library.s
   Uses
      At line 8 in file string_library.s
      At line 252 in file string_library.s
      At line 269 in file string_library.s

println 00000188

Symbol: println
   Definitions
      At line 250 in file string_library.s
   Uses
      At line 9 in file string_library.s
Comment: println used once
prompt 0000019C

Symbol: prompt
   Definitions
      At line 267 in file string_library.s
   Uses
      At line 10 in file string_library.s
Comment: prompt used once
rc_loop 000001C0

Symbol: rc_loop
   Definitions
      At line 291 in file string_library.s
   Uses
      At line 296 in file string_library.s
Comment: rc_loop used once
read_character 000001B4

Symbol: read_character
   Definitions
      At line 285 in file string_library.s
   Uses
      At line 11 in file string_library.s
      At line 319 in file string_library.s

read_string 000001DC

Symbol: read_string
   Definitions
      At line 313 in file string_library.s
   Uses
      At line 12 in file string_library.s
      At line 270 in file string_library.s

read_string_mem 00000010

Symbol: read_string_mem
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 32 in file string_library.s
   Uses
      At line 316 in file string_library.s
Comment: read_string_mem used once
reverse_string 00000214

Symbol: reverse_string
   Definitions
      At line 342 in file string_library.s
   Uses
      At line 13 in file string_library.s
      At line 158 in file string_library.s

reverse_string_mem 00000020

Symbol: reverse_string_mem
   Definitions
      At line 40 in file string_library.s
   Uses
      At line 347 in file string_library.s
      At line 358 in file string_library.s

rs_loop 000001E8

Symbol: rs_loop
   Definitions
      At line 318 in file string_library.s
   Uses
      At line 324 in file string_library.s
Comment: rs_loop used once
rv_loop 00000224

Symbol: rv_loop
   Definitions
      At line 348 in file string_library.s
   Uses
      At line 353 in file string_library.s
Comment: rv_loop used once
set_figs 0000024C

Symbol: set_figs
   Definitions
      At line 374 in file string_library.s
   Uses
      At line 14 in file string_library.s
Comment: set_figs used once
set_figs_mem 00000030

Symbol: set_figs_mem
   Definitions
      At line 47 in file string_library.s
   Uses
      At line 381 in file string_library.s
      At line 394 in file string_library.s

sf_done 0000028C

Symbol: sf_done
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 395 in file string_library.s
   Uses
      At line 380 in file string_library.s
Comment: sf_done used once
sf_loop 00000264

Symbol: sf_loop
   Definitions
      At line 382 in file string_library.s
   Uses
      At line 389 in file string_library.s
Comment: sf_loop used once
sl_loop 000002B8

Symbol: sl_loop
   Definitions
      At line 438 in file string_library.s
   Uses
      At line 442 in file string_library.s
Comment: sl_loop used once
ss_loop 00000298

Symbol: ss_loop
   Definitions
      At line 414 in file string_library.s
   Uses
      At line 418 in file string_library.s
Comment: ss_loop used once
store_string 00000294

Symbol: store_string
   Definitions
      At line 412 in file string_library.s
   Uses
      At line 15 in file string_library.s
Comment: store_string used once
string_length 000002B0

Symbol: string_length
   Definitions
      At line 434 in file string_library.s
   Uses
      At line 16 in file string_library.s
      At line 344 in file string_library.s
      At line 378 in file string_library.s

string_library 00000000

Symbol: string_library
   Definitions
      At line 1 in file string_library.s
   Uses
      None
Comment: string_library unused
34 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 56 in file string_library.s
   Uses
      At line 201 in file string_library.s
      At line 290 in file string_library.s

U0THR E000C000

Symbol: U0THR
   Definitions
      At line 55 in file string_library.s
   Uses
      At line 200 in file string_library.s
      At line 289 in file string_library.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

div_and_mod 00000000

Symbol: div_and_mod
   Definitions
      At line 18 in file string_library.s
   Uses
      At line 148 in file string_library.s
Comment: div_and_mod used once
1 symbol
359 symbols in table
