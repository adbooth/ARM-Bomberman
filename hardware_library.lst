


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             hardware_library, CODE, READWRI
TE
    2 00000000         ; EXPORTs
    3 00000000                 EXPORT           pin_clear
    4 00000000                 EXPORT           RGB_LED
    5 00000000                 EXPORT           rgb_set
    6 00000000                 EXPORT           seg_pattern_display
    7 00000000                 EXPORT           read_push_btns
    8 00000000                 EXPORT           display_digit
    9 00000000                 EXPORT           LEDs
   10 00000000         ; Initialization EXPORTs
   11 00000000                 EXPORT           GPIO_init
   12 00000000                 EXPORT           uart_init
   13 00000000         ; IMPORTs
   14 00000000                 IMPORT           cmp_str
   15 00000000         
   16 00000000         
   17 00000000         
   18 00000000         
   19 00000000         ; Bit reverse for led sequence
   20 00000000         LEDs_table
   21 00000000 00000000        DCD              0x00000000  ; 0
   22 00000004 00080000        DCD              0x00080000  ; 1
   23 00000008 00040000        DCD              0x00040000  ; 2
   24 0000000C 000C0000        DCD              0x000C0000  ; 3
   25 00000010 00020000        DCD              0x00020000  ; 4
   26 00000014 000A0000        DCD              0x000A0000  ; 5
   27 00000018 00060000        DCD              0x00060000  ; 6
   28 0000001C 000E0000        DCD              0x000E0000  ; 7
   29 00000020 00010000        DCD              0x00010000  ; 8
   30 00000024 00090000        DCD              0x00090000  ; 9
   31 00000028 00050000        DCD              0x00050000  ; 10
   32 0000002C 000D0000        DCD              0x000D0000  ; 11
   33 00000030 00030000        DCD              0x00030000  ; 12
   34 00000034 000B0000        DCD              0x000B0000  ; 13
   35 00000038 00070000        DCD              0x00070000  ; 14
   36 0000003C 000F0000        DCD              0x000F0000  ; 15
   37 00000040                 ALIGN
   38 00000040         
   39 00000040         ; Decimal conversion to ASCII
   40 00000040         read_push_btns_table
   41 00000040 00000030        DCD              0x00000030  ; 0
   42 00000044 00000031        DCD              0x00000031  ; 1
   43 00000048 00000032        DCD              0x00000032  ; 2
   44 0000004C 00000033        DCD              0x00000033  ; 3
   45 00000050 00000034        DCD              0x00000034  ; 4
   46 00000054 00000035        DCD              0x00000035  ; 5
   47 00000058 00000036        DCD              0x00000036  ; 6
   48 0000005C 00000037        DCD              0x00000037  ; 7
   49 00000060 00000038        DCD              0x00000038  ; 8
   50 00000064 00000039        DCD              0x00000039  ; 9
   51 00000068 00003031        DCD              0x00003031  ; 10
   52 0000006C 00003131        DCD              0x00003131  ; 11
   53 00000070 00003231        DCD              0x00003231  ; 12
   54 00000074 00003331        DCD              0x00003331  ; 13
   55 00000078 00003431        DCD              0x00003431  ; 14
   56 0000007C 00003531        DCD              0x00003531  ; 15
   57 00000080                 ALIGN
   58 00000080         



ARM Macro Assembler    Page 2 


   59 00000080         ; Lookup table for codes to display hex digits on seven 
                       segment
   60 00000080         display_digit_table
   61 00000080 00001F80        DCD              0x00001F80  ; 0
   62 00000084 00000300        DCD              0x00000300  ; 1
   63 00000088 00002D80        DCD              0x00002D80  ; 2
   64 0000008C 00002780        DCD              0x00002780  ; 3
   65 00000090 00003300        DCD              0x00003300  ; 4
   66 00000094 00003680        DCD              0x00003680  ; 5
   67 00000098 00003E80        DCD              0x00003E80  ; 6
   68 0000009C 00000380        DCD              0x00000380  ; 7
   69 000000A0 00003F80        DCD              0x00003F80  ; 8
   70 000000A4 00003780        DCD              0x00003780  ; 9
   71 000000A8 00003B80        DCD              0x00003B80  ; A
   72 000000AC 00003E00        DCD              0x00003E00  ; B
   73 000000B0 00001C80        DCD              0x00001C80  ; C
   74 000000B4 00002F00        DCD              0x00002F00  ; D
   75 000000B8 00003C80        DCD              0x00003C80  ; E
   76 000000BC 00003880        DCD              0x00003880  ; F
   77 000000C0                 ALIGN
   78 000000C0         
   79 000000C0         ; Lookup table for codes to display colors on the RGB LE
                       D
   80 000000C0         color_chars_table
   81 000000C0 00000077        DCD              0x00000077  ; white
   82 000000C4 00000063        DCD              0x00000063  ; cyan
   83 000000C8 00000079        DCD              0x00000079  ; yellow
   84 000000CC 00000067        DCD              0x00000067  ; green
   85 000000D0 00000070        DCD              0x00000070  ; purple
   86 000000D4 00000062        DCD              0x00000062  ; blue
   87 000000D8 00000072        DCD              0x00000072  ; red
   88 000000DC 0000006F        DCD              0x0000006F  ; off
   89 000000E0                 ALIGN
   90 000000E0         
   91 000000E0         
   92 000000E0         ; ##### GPIO_init addresses
   93 000000E0         ; Pin Connect Block addresses
   94 000000E0 E002C000 
                       PINSEL0 EQU              0xE002C000
   95 000000E0 E002C004 
                       PINSEL1 EQU              0xE002C004
   96 000000E0         ; GPIO Direction Register addresses
   97 000000E0 E0028008 
                       IO0DIR  EQU              0xE0028008
   98 000000E0 E0028018 
                       IO1DIR  EQU              0xE0028018
   99 000000E0         ; GPIO Output Set Register addresses
  100 000000E0 E0028004 
                       IO0SET  EQU              0xE0028004
  101 000000E0 E0028014 
                       IO1SET  EQU              0xE0028014
  102 000000E0         ; GPIO Output Clear Register addresses
  103 000000E0 E002800C 
                       IO0CLR  EQU              0xE002800C
  104 000000E0 E002801C 
                       IO1CLR  EQU              0xE002801C
  105 000000E0         ; GPIO Port Pin Value Register addresses
  106 000000E0 E0028000 
                       IO0PIN  EQU              0xE0028000



ARM Macro Assembler    Page 3 


  107 000000E0 E0028010 
                       IO1PIN  EQU              0xE0028010
  108 000000E0         ; ##### GPIO_init codes
  109 000000E0         ; GPIO pinsel0 code
  110 000000E0 00000005 
                       PINSEL0_code
                               EQU              0x00000005
  111 000000E0         ; GPIO port direction code
  112 000000E0 00263F80 
                       IO0DIR_code
                               EQU              0x00263F80
  113 000000E0 000F0000 
                       IO1DIR_code
                               EQU              0x000F0000
  114 000000E0         
  115 000000E0         ; ##### uart_init addresses
  116 000000E0 E000C000 
                       UART0_address
                               EQU              0xE000C000
  117 000000E0         
  118 000000E0         
  119 000000E0         
  120 000000E0         ; Takes users button inputs and displays decimal equival
                       ent in UART
  121 000000E0         ; Author: MH
  122 000000E0         ; No input arguments
  123 000000E0         ; Leaf routine
  124 000000E0         ; Deletes whatever is in r0
  125 000000E0         read_push_btns
  126 000000E0 E92D5FFE        STMFD            SP!, {r1-r12,lr}
  127 000000E4 E59F71A0        LDR              r7, =LEDs_table ; Load LEDs_tab
                                                            le table address in
                                                            to r7
  128 000000E8 E59F61A0        LDR              r6, =read_push_btns_table ; Loa
                                                            d read_push_btns_ta
                                                            ble table address i
                                                            nto r6
  129 000000EC E59F51A0        LDR              r5, =IO1PIN ; Load IO1PIN addre
                                                            ss into r5
  130 000000F0 E5950000        LDR              r0, [r5]    ; Load value of IO1
                                                            PIN register
  131 000000F4 E200060F        AND              r0, r0, #0x00F00000 ; Mask it t
                                                            o just work with bi
                                                            ts 20-23
  132 000000F8 E1E00000        MVN              r0, r0      ; Take 1s complimen
                                                            t
  133 000000FC E1A00A20        LSR              r0, r0, #20 ; Logical shift rig
                                                            ht 20 so value is i
                                                            n least significant
                                                             bit
  134 00000100 E200000F        AND              r0, r0, #0x0000000F ; Mask out 
                                                            Fs from 1s complime
                                                            nt
  135 00000104 E7971100        LDR              r1, [r7, r0, LSL #2] ; Load rev
                                                            ersed bit sequence 
                                                            from LEDs_table tab
                                                            le
  136 00000108 E1A01821        LSR              r1, r1, #16 ; Logical shift rig
                                                            ht 16 bits so value



ARM Macro Assembler    Page 4 


                                                             is in least signif
                                                            icant bits
  137 0000010C E1A00001        MOV              r0, r1
  138 00000110 E8BD5FFE        LDMFD            SP!, {r1-r12,lr} ; Restore regi
                                                            ster lr from stack
  139 00000114 E12FFF1E        BX               lr          ; Loop back to star
                                                            t
  140 00000118         ; Returns decimal equivalent of what was on the board in
                        r0
  141 00000118         
  142 00000118         
  143 00000118         
  144 00000118         
  145 00000118         
  146 00000118         ; Routine display_digit
  147 00000118         ; Author: ADB
  148 00000118         ; Displays a hex value on the seven segment display base
                       d on the value of arg0
  149 00000118         ; Calls seg_pattern_display
  150 00000118         ; arg0: value to be displayed on seven segment display
  151 00000118         display_digit
  152 00000118 E92D4003        STMFD            sp!, {r0, r1, lr}
  153 0000011C         ; Get the right digit pattern code by using paramter 0 a
                       s an offset
  154 0000011C E59F1174        LDR              r1, =display_digit_table ; Put 
                                                            base address of dig
                                                            it pattern codes in
                                                            to base register
  155 00000120 E7910100        LDR              r0, [r1, r0, LSL #2] ; Load dig
                                                            it pattern code int
                                                            o arg0 offset by pa
                                                            r0. The 2-bit left 
                                                            shift is to move 4 
                                                            bytes at a time
  156 00000124 EBFFFFFE        BL               seg_pattern_display ; Call seg_
                                                            pattern_display
  157 00000128         ; Prepare for return
  158 00000128 E8BD4003        LDMFD            sp!, {r0, r1, lr} ; Load used r
                                                            egisters from stack
                                                            
  159 0000012C E12FFF1E        BX               lr          ; Branch to caller
  160 00000130         ; No return arguments
  161 00000130         
  162 00000130         
  163 00000130         
  164 00000130         
  165 00000130         
  166 00000130         ; Routine that takes user input 0-15 and displays binary
                        value on the on board leds
  167 00000130         ; Author: MH
  168 00000130         ; Takes a decimal number 0-15 as input argument
  169 00000130         ; Leaf routine
  170 00000130         ; No input arguments or addresses
  171 00000130         ; TODO check if order of set and clr matter
  172 00000130         LEDs
  173 00000130 E92D5FFE        STMFD            SP!, {r1-r12,lr}
  174 00000134 E59F5160        LDR              r5, =IO1SET ; Load IO1SET addre
                                                            ss to r5
  175 00000138 E59F414C        LDR              r4, =LEDs_table ; Load LEDs_tab



ARM Macro Assembler    Page 5 


                                                            le table address
  176 0000013C E59F615C        LDR              r6, =IO1CLR ; Load IO1CLR addre
                                                            ss into r5
  177 00000140 E7941100        LDR              r1, [r4, r0, LSL #2] ; Load val
                                                            ue at r4 with offse
                                                            t of user input int
                                                            o r1
  178 00000144 E5861000        STR              r1, [r6]    ; Store r1 into IO1
                                                            CLR
  179 00000148 E1E01001        MVN              r1, r1      ; Take 1s complimen
                                                            t
  180 0000014C E5851000        STR              r1, [r5]    ; Store r1 into IO1
                                                            SET
  181 00000150 E8BD5FFE        LDMFD            SP!, {r1-r12,lr} ; Restore regi
                                                            ster lr from stack
  182 00000154 E12FFF1E        BX               lr          ; Loop back to star
                                                            t
  183 00000158         ; No return arguments or addresses
  184 00000158         
  185 00000158         
  186 00000158         
  187 00000158         
  188 00000158         
  189 00000158         ; Routine pin_clear
  190 00000158         ; Author: ADB & MTH
  191 00000158         ; Clears outputs
  192 00000158         ; Leaf routine
  193 00000158         ; No input arguments or addresses
  194 00000158         pin_clear
  195 00000158 E92D4003        STMFD            sp!, {r0, r1, lr}
  196 0000015C         ; Turn off active HIGH outputs for IO0
  197 0000015C E59F1140        LDR              r1, =IO0CLR
  198 00000160 E3A00DFE        LDR              r0, =0x00003F80
  199 00000164 E5810000        STR              r0, [r1]
  200 00000168         
  201 00000168         ; Turn off active LOW outputs for IO0
  202 00000168 E59F1138        LDR              r1, =IO0SET
  203 0000016C E3A00826        LDR              r0, =0x00260000
  204 00000170 E5810000        STR              r0, [r1]
  205 00000174         
  206 00000174         ; Turn off active LOW outputs for IO1
  207 00000174 E59F1120        LDR              r1, =IO1SET
  208 00000178 E3A0080F        LDR              r0, =0x000F0000
  209 0000017C E5810000        STR              r0, [r1]
  210 00000180         ; Return to caller
  211 00000180 E8BD4003        LDMFD            sp!, {r0, r1, lr}
  212 00000184 E12FFF1E        BX               lr
  213 00000188         ; No return arguments or addresses
  214 00000188         
  215 00000188         
  216 00000188         
  217 00000188         
  218 00000188         
  219 00000188         ; Routine RGB_LED
  220 00000188         ; Author: ADB
  221 00000188         ; Sets RGB LED color based on arg4
  222 00000188         ; Calls rgb_set and cmp_str
  223 00000188         ; arg4: base address of string representing color to be 
                       displayed



ARM Macro Assembler    Page 6 


  224 00000188         RGB_LED
  225 00000188 E92D4022        STMFD            sp!, {r1, r5, lr}
  226 0000018C         ; Initialize counters
  227 0000018C E3A01000        MOV              r1, #0      ; Initialize loop c
                                                            ounter
  228 00000190 E59F5114        LDR              r5, =color_chars_table ; Initia
                                                            lize table counter
  229 00000194         rm_loop
  230 00000194         ; Repeatedly compare input string and stored strings, co
                       ntinue if equal
  231 00000194 E3510008        CMP              r1, #8      ; CPSR := compare(c
                                                            ounter, 8)
  232 00000198 A8BD4022        LDMFDGE          sp!, {r1, r5, lr} ; if(counter 
                                                            >= 8) load used reg
                                                            isters from stack
  233 0000019C A12FFF1E        BXGE             lr          ; if(counter >= 8) 
                                                            branch to caller
  234 000001A0 EBFFFFFE        BL               cmp_str     ; Compare strings
  235 000001A4 E3500000        CMP              r0, #0      ; CPSR should get e
                                                            qual if strings are
                                                             equal
  236 000001A8 12855004        ADDNE            r5, r5, #4  ; if(strings not eq
                                                            ual) increment tabl
                                                            e counter
  237 000001AC 12811001        ADDNE            r1, r1, #1  ; if(strings not eq
                                                            ual) increment loop
                                                             counter
  238 000001B0 1AFFFFF7        BNE              rm_loop     ; if(strings not eq
                                                            ual) loop
  239 000001B4 E1A00001        MOV              r0, r1      ; Copy counter to a
                                                            rg0
  240 000001B8 EBFFFFFE        BL               rgb_set     ; Call rgb_set
  241 000001BC         ; Prepare for return
  242 000001BC E8BD4022        LDMFD            sp!, {r1, r5, lr} ; Load used r
                                                            egisters from stack
                                                            
  243 000001C0 E12FFF1E        BX               lr          ; Branch to caller
  244 000001C4         ; No return arguments
  245 000001C4         
  246 000001C4         
  247 000001C4         ; Routine rgb_set
  248 000001C4         ; Author: ADB
  249 000001C4         ; Sets the RGB LED color based on arg0.
  250 000001C4         ; Leaf routine
  251 000001C4         ; Since there are three colors to change (red, green, bl
                       ue), there are 8 (2^3) possible colors
  252 000001C4         ; arg0: color code of desired color
  253 000001C4         ; The codes for each color are as follows:
  254 000001C4         ; 0: white
  255 000001C4         ; 1: cyan
  256 000001C4         ; 2: yellow
  257 000001C4         ; 3: green
  258 000001C4         ; 4: purple
  259 000001C4         ; 5: blue
  260 000001C4         ; 6: red
  261 000001C4         ; 7: off
  262 000001C4         rgb_set
  263 000001C4 E92D4003        STMFD            sp!, {r0, r1, lr}
  264 000001C8         ; Test bit 2



ARM Macro Assembler    Page 7 


  265 000001C8 E3A01004        MOV              r1, #0x04
  266 000001CC E0001001        AND              r1, r0, r1  ; Mask arg0 for bit
                                                             2
  267 000001D0         ; If bit 2 is set, reset bit 2 and set bit 4
  268 000001D0 E3510004        CMP              r1, #0x04   ; CPSR := CMP(maske
                                                            d argument, 0x04)
  269 000001D4 03C00004        BICEQ            r0, r0, #0x04 ; if(masked arg =
                                                            = 0x04) clear bit 2
                                                            
  270 000001D8 03800010        ORREQ            r0, r0, #0x10 ; if(masked arg =
                                                            = 0x04) set bit 4
  271 000001DC         ; Left shift until in the proper argument positions (17 
                       bits)
  272 000001DC E1A00880        LSL              r0, r0, #17
  273 000001E0         ; Load code into set and clear registers
  274 000001E0 E2000826        AND              r0, r0, #0x00260000
  275 000001E4 E59F10BC        LDR              r1, =IO0SET ; Load IO0SET regis
                                                            ter address
  276 000001E8 E5810000        STR              r0, [r1]    ; Store code into I
                                                            O0SET register
  277 000001EC E1E00000        MVN              r0, r0      ; Take one's comple
                                                            ment of code
  278 000001F0 E2000826        AND              r0, r0, #0x00260000
  279 000001F4 E59F10A8        LDR              r1, =IO0CLR ; Load IO0CLR regis
                                                            ter address
  280 000001F8 E5810000        STR              r0, [r1]    ; Store code into I
                                                            O0CLR address
  281 000001FC         ; Prepare for return
  282 000001FC E8BD4003        LDMFD            sp!, {r0, r1, lr} ; Load used r
                                                            egisters from stack
                                                            
  283 00000200 E12FFF1E        BX               lr          ; Branch to caller
  284 00000204         ; No return arguments
  285 00000204         
  286 00000204         
  287 00000204         
  288 00000204         
  289 00000204         
  290 00000204         ; Routine seg_pattern_display
  291 00000204         ; Author: ADB
  292 00000204         ; Displays a pattern on the seven segment display based 
                       on the code of arg0
  293 00000204         ; Leaf routine
  294 00000204         ; arg0: pattern code for segments to be set
  295 00000204         seg_pattern_display
  296 00000204 E92D4002        STMFD            sp!, {r1, lr}
  297 00000208         ; Set segments that should be lit to HIGH
  298 00000208 E59F1098        LDR              r1, =IO0SET ; Put address of IO
                                                            0SET register into 
                                                            address register
  299 0000020C E5810000        STR              r0, [r1]    ; Store par0 in mem
                                                            ory at address of I
                                                            O0SET
  300 00000210         ; Set segments that should be off to LOW
  301 00000210 E3A01DFE        MOV              r1, #0x3F80 ; Move ones-complem
                                                            ent of par0 into re
                                                            t0
  302 00000214 E0200001        EOR              r0, r0, r1
  303 00000218 E59F1084        LDR              r1, =IO0CLR ; Put address of IO



ARM Macro Assembler    Page 8 


                                                            0CLR register into 
                                                            address register
  304 0000021C E5810000        STR              r0, [r1]    ; Store ones-comple
                                                            ment of par0 at add
                                                            ress of IO0CLR
  305 00000220         ; Prepare for return
  306 00000220 E8BD4002        LDMFD            sp!, {r1, lr} ; Load used regis
                                                            ters from stack
  307 00000224 E12FFF1E        BX               lr          ; Branch to caller
  308 00000228         ; No return arguments
  309 00000228         
  310 00000228         
  311 00000228         
  312 00000228         
  313 00000228         
  314 00000228         ; ###############################################
  315 00000228         ; Here start the hardware initialization routines
  316 00000228         ; ###############################################
  317 00000228         
  318 00000228         
  319 00000228         ; Routine GPIO_init
  320 00000228         ; Author: ADB & MH
  321 00000228         ; Sets up the pin select block and GPIO direction regist
                       ers for use with the 7 segment display, RGB LED, buttons
                        and LEDs
  322 00000228         ; Leaf routine
  323 00000228         ; No input arguments or addresses
  324 00000228         GPIO_init
  325 00000228         ; Store used registers on stack
  326 00000228 E92D4003        STMFD            sp!, {r0, r1, lr}
  327 0000022C         ; Store PINSEL0_code in pin select block register
  328 0000022C E59F107C        LDR              r1, =PINSEL0
  329 00000230 E3A00005        LDR              r0, =PINSEL0_code
  330 00000234 E5810000        STR              r0, [r1]
  331 00000238         ; Store IO0DIR_code in GPIO port 0 direction register
  332 00000238 E59F1074        LDR              r1, =IO0DIR
  333 0000023C E59F0074        LDR              r0, =IO0DIR_code
  334 00000240 E5810000        STR              r0, [r1]
  335 00000244         ; Store IO1DIR_code in GPIO port 1 direction register
  336 00000244 E59F1070        LDR              r1, =IO1DIR ; Load IO1DIR addre
                                                            ss
  337 00000248 E3A0080F        MOV              r0, #0x000F0000 
                                                            ; Load IO1DIR code
  338 0000024C E5810000        STR              r0, [r1]    ; Store IO1DIR code
                                                             in IO1DIR
  339 00000250         ; Clear outputs
  340 00000250 EBFFFFFE        BL               pin_clear
  341 00000254         ; Prepare for return
  342 00000254 E8BD4003        LDMFD            sp!, {r0, r1, lr} ; Load used r
                                                            egisters from stack
                                                            
  343 00000258 E12FFF1E        BX               lr          ; Branch to caller
  344 0000025C         ; No return arguments or addresses
  345 0000025C         
  346 0000025C         
  347 0000025C         
  348 0000025C         
  349 0000025C         
  350 0000025C         ; Routine uart_init



ARM Macro Assembler    Page 9 


  351 0000025C         ; Author: MH & ADB
  352 0000025C         ; Prepares uart for operation
  353 0000025C         ; Leaf routine
  354 0000025C         ; No input arguments or addresses
  355 0000025C         uart_init
  356 0000025C         ; Store used registers to stack
  357 0000025C E92D4003        STMFD            sp!, {r0, r1, lr}
  358 00000260         ; Load base address into r1
  359 00000260 E59F1058        LDR              r1, =UART0_address
  360 00000264         ; Unlatch
  361 00000264 E3A00083        MOV              r0, #131    ; Move 131 into r0
  362 00000268 E581000C        STR              r0, [r1, #0xC] ; Store r0 into 
                                                            r1 with offset of 0
                                                            xC
  363 0000026C         ; Change contents held at base address
  364 0000026C E3A00003        MOV              r0, #3      ; Move 3 into r0. T
                                                            his puts it at a ba
                                                            ud rate of 384000
  365 00000270 E5810000        STR              r0, [r1]    ; Store r0 into r1
  366 00000274         ; Change contents held at base address + 4
  367 00000274 E3A00000        MOV              r0, #0      ; Move 0 into r0
  368 00000278 E5810004        STR              r0, [r1, #0x4] ; Store r0 into 
                                                            r1 with offset of 4
                                                            
  369 0000027C         ; Relatch
  370 0000027C E3A00003        MOV              r0, #3      ; Move 3 into r0
  371 00000280 E581000C        STR              r0, [r1, #0xC] ; Store r0 into 
                                                            r1 with offset of 0
                                                            xC
  372 00000284         ; Prepare to return
  373 00000284 E8BD4003        LDMFD            sp!, {r0, r1, lr} ; Load used r
                                                            egisters from stack
                                                            
  374 00000288 E12FFF1E        BX               lr          ; Branch to caller
  375 0000028C         ; No return arguments or addresses
  376 0000028C         
  377 0000028C         
  378 0000028C         
  379 0000028C         
  380 0000028C         
  381 0000028C                 END
              00000000 
              00000000 
              E0028010 
              00000000 
              E0028014 
              E002801C 
              E002800C 
              E0028004 
              00000000 
              E002C000 
              E0028008 
              00263F80 
              E0028018 
              E000C000 
Command Line: --debug --xref --apcs=interwork -ohardware_library.o -IC:\Keil\AR
M\INC -IC:\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" --list=hardware_lib
rary.lst hardware_library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

GPIO_init 00000228

Symbol: GPIO_init
   Definitions
      At line 324 in file hardware_library.s
   Uses
      At line 11 in file hardware_library.s
Comment: GPIO_init used once
LEDs 00000130

Symbol: LEDs
   Definitions
      At line 172 in file hardware_library.s
   Uses
      At line 9 in file hardware_library.s
Comment: LEDs used once
LEDs_table 00000000

Symbol: LEDs_table
   Definitions
      At line 20 in file hardware_library.s
   Uses
      At line 127 in file hardware_library.s
      At line 175 in file hardware_library.s

RGB_LED 00000188

Symbol: RGB_LED
   Definitions
      At line 224 in file hardware_library.s
   Uses
      At line 4 in file hardware_library.s
Comment: RGB_LED used once
color_chars_table 000000C0

Symbol: color_chars_table
   Definitions
      At line 80 in file hardware_library.s
   Uses
      At line 228 in file hardware_library.s
Comment: color_chars_table used once
display_digit 00000118

Symbol: display_digit
   Definitions
      At line 151 in file hardware_library.s
   Uses
      At line 8 in file hardware_library.s
Comment: display_digit used once
display_digit_table 00000080

Symbol: display_digit_table
   Definitions
      At line 60 in file hardware_library.s
   Uses
      At line 154 in file hardware_library.s
Comment: display_digit_table used once
hardware_library 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: hardware_library
   Definitions
      At line 1 in file hardware_library.s
   Uses
      None
Comment: hardware_library unused
pin_clear 00000158

Symbol: pin_clear
   Definitions
      At line 194 in file hardware_library.s
   Uses
      At line 3 in file hardware_library.s
      At line 340 in file hardware_library.s

read_push_btns 000000E0

Symbol: read_push_btns
   Definitions
      At line 125 in file hardware_library.s
   Uses
      At line 7 in file hardware_library.s
Comment: read_push_btns used once
read_push_btns_table 00000040

Symbol: read_push_btns_table
   Definitions
      At line 40 in file hardware_library.s
   Uses
      At line 128 in file hardware_library.s
Comment: read_push_btns_table used once
rgb_set 000001C4

Symbol: rgb_set
   Definitions
      At line 262 in file hardware_library.s
   Uses
      At line 5 in file hardware_library.s
      At line 240 in file hardware_library.s

rm_loop 00000194

Symbol: rm_loop
   Definitions
      At line 229 in file hardware_library.s
   Uses
      At line 238 in file hardware_library.s
Comment: rm_loop used once
seg_pattern_display 00000204

Symbol: seg_pattern_display
   Definitions
      At line 295 in file hardware_library.s
   Uses
      At line 6 in file hardware_library.s
      At line 156 in file hardware_library.s

uart_init 0000025C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: uart_init
   Definitions
      At line 355 in file hardware_library.s
   Uses
      At line 12 in file hardware_library.s
Comment: uart_init used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 103 in file hardware_library.s
   Uses
      At line 197 in file hardware_library.s
      At line 279 in file hardware_library.s
      At line 303 in file hardware_library.s

IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 97 in file hardware_library.s
   Uses
      At line 332 in file hardware_library.s
Comment: IO0DIR used once
IO0DIR_code 00263F80

Symbol: IO0DIR_code
   Definitions
      At line 112 in file hardware_library.s
   Uses
      At line 333 in file hardware_library.s
Comment: IO0DIR_code used once
IO0PIN E0028000

Symbol: IO0PIN
   Definitions
      At line 106 in file hardware_library.s
   Uses
      None
Comment: IO0PIN unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 100 in file hardware_library.s
   Uses
      At line 202 in file hardware_library.s
      At line 275 in file hardware_library.s
      At line 298 in file hardware_library.s

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 104 in file hardware_library.s
   Uses
      At line 176 in file hardware_library.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 98 in file hardware_library.s
   Uses
      At line 336 in file hardware_library.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: IO1DIR used once
IO1DIR_code 000F0000

Symbol: IO1DIR_code
   Definitions
      At line 113 in file hardware_library.s
   Uses
      None
Comment: IO1DIR_code unused
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 107 in file hardware_library.s
   Uses
      At line 129 in file hardware_library.s
Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 101 in file hardware_library.s
   Uses
      At line 174 in file hardware_library.s
      At line 207 in file hardware_library.s

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 94 in file hardware_library.s
   Uses
      At line 328 in file hardware_library.s
Comment: PINSEL0 used once
PINSEL0_code 00000005

Symbol: PINSEL0_code
   Definitions
      At line 110 in file hardware_library.s
   Uses
      At line 329 in file hardware_library.s
Comment: PINSEL0_code used once
PINSEL1 E002C004

Symbol: PINSEL1
   Definitions
      At line 95 in file hardware_library.s
   Uses
      None
Comment: PINSEL1 unused
UART0_address E000C000

Symbol: UART0_address
   Definitions
      At line 116 in file hardware_library.s
   Uses
      At line 359 in file hardware_library.s
Comment: UART0_address used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

cmp_str 00000000

Symbol: cmp_str
   Definitions
      At line 14 in file hardware_library.s
   Uses
      At line 234 in file hardware_library.s
Comment: cmp_str used once
1 symbol
352 symbols in table
